
name: CICD Pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro

      - name: Push DVC-tracked data to remote
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1  # Replace with your AWS region
        run: |
          dvc push

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add changes to Git
        run: |
          git add .

      - name: Commit changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"

      - name: Push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin ${{ github.ref_name }}

      - name: Install test dependencies
        run: |
          pip install pytest

      # - name: Run model test
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python -m unittest tests/test_model.py

      # - name: Promote model to production
      #   if: success()
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python scripts/promote_model.py

      # - name: Run Flask app tests
      #   if: success()
      #   env:
      #     DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
      #   run: |
      #     python -m unittest tests/test_flask_app.py

      # - name: Log in to Docker Hub
      #   if: success()
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Build Docker image
      #   if: success()
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mini-project:latest .

      # - name: Push Docker image to Docker Hub
      #   if: success()
      #   run: |
      #     docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mini-project:latest

      # # Added Step: Trigger Render Deployment
      # - name: Deploy to Render
      #   if: success()
      #   run: |
      #     curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
